import os
import streamlit as st
import pandas as pd
import plotly.express as px
from collections import Counter
import requests

# ConfiguraÃ§Ãµes da pÃ¡gina do Streamlit
st.set_page_config(
    page_title='Dashboard Interativo das Top SÃ©ries de TV',
    page_icon='ðŸ“º',
    layout='wide',
    initial_sidebar_state='expanded'
)

# Chave de API do TMDB 
API_KEY = 'cd54cd3d7a97a19dac6fc20dd8041a81'

# Determinar o diretÃ³rio base
BASE_DIR = os.path.dirname(os.path.abspath(__file__))

# Construir o caminho para o arquivo CSV na pasta 'src'
csv_path = os.path.join(BASE_DIR, '..', 'src', 'series_data.csv')

@st.cache  # Decorador para cachear a funÃ§Ã£o e evitar recarregamentos desnecessÃ¡rios
def load_data():
    # Carrega os dados do arquivo CSV
    df = pd.read_csv(csv_path)
    # Converte as colunas de strings para listas usando 'eval'
    df['generos'] = df['generos'].apply(lambda x: eval(x))
    df['pais_origem'] = df['pais_origem'].apply(lambda x: eval(x))
    # Converte a coluna 'data_lancamento' para datetime, lidando com erros
    df['data_lancamento'] = pd.to_datetime(df['data_lancamento'], errors='coerce')
    # Remove linhas com 'data_lancamento' nulo
    df = df.dropna(subset=['data_lancamento'])
    # Extrai o ano de lanÃ§amento
    df['ano_lancamento'] = df['data_lancamento'].dt.year
    return df

# Carrega os dados e armazena em 'df'
df = load_data()

# TÃ­tulo do dashboard
st.title('Dashboard Interativo das Top SÃ©ries de TV')

# Sidebar para filtros
st.sidebar.title('OpÃ§Ãµes de Filtro')

# Filtro por GÃªnero
# ObtÃ©m uma lista Ãºnica de todos os gÃªneros disponÃ­veis
generos_disponiveis = sorted(set([genre for sublist in df['generos'] for genre in sublist]))
# Cria um multiselect na sidebar para os gÃªneros
genero_selecionado = st.sidebar.multiselect('Filtrar por GÃªnero:', generos_disponiveis)

# Filtro por Ano de LanÃ§amento
# ObtÃ©m uma lista Ãºnica de anos disponÃ­veis
anos_disponiveis = sorted(df['ano_lancamento'].dropna().unique())
# Cria um slider de seleÃ§Ã£o de intervalo de anos
ano_min, ano_max = st.sidebar.select_slider(
    'Selecione o intervalo de anos:',
    options=anos_disponiveis,
    value=(min(anos_disponiveis), max(anos_disponiveis))
)

# Filtro por AvaliaÃ§Ã£o
# Cria um slider para selecionar a faixa de avaliaÃ§Ã£o
avaliacao_min, avaliacao_max = st.sidebar.slider(
    'Selecione a faixa de avaliaÃ§Ã£o:',
    float(df['avaliacao'].min()),
    float(df['avaliacao'].max()),
    (float(df['avaliacao'].min()), float(df['avaliacao'].max()))
)

# Aplicar filtros
df_filtrado = df.copy()

# Filtra por gÃªnero, se selecionado
if genero_selecionado:
    df_filtrado = df_filtrado[df_filtrado['generos'].apply(lambda x: any(genero in x for genero in genero_selecionado))]

# Filtra pelo intervalo de anos
df_filtrado = df_filtrado[(df_filtrado['ano_lancamento'] >= ano_min) & (df_filtrado['ano_lancamento'] <= ano_max)]

# Filtra pela faixa de avaliaÃ§Ã£o
df_filtrado = df_filtrado[(df_filtrado['avaliacao'] >= avaliacao_min) & (df_filtrado['avaliacao'] <= avaliacao_max)]

# FunÃ§Ã£o para obter o poster da sÃ©rie usando a API do TMDB
def get_poster_url(api_key, serie_id):
    base_url = 'https://api.themoviedb.org/3/tv/{}'
    poster_base_url = 'https://image.tmdb.org/t/p/w500'
    url = base_url.format(serie_id)
    params = {
        'api_key': api_key,
        'language': 'pt-BR'
    }
    response = requests.get(url, params=params)
    data = response.json()
    poster_path = data.get('poster_path')
    if poster_path:
        return poster_base_url + poster_path
    else:
        return None

# Cria abas para organizar os grÃ¡ficos e anÃ¡lises
tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs([
    'AvaliaÃ§Ãµes', 
    'GÃªneros', 
    'Temporadas x AvaliaÃ§Ã£o', 
    'AvaliaÃ§Ã£o por Ano', 
    'SÃ©ries por PaÃ­s', 
    'Destaque: Breaking Bad'
])

with tab1:
    st.header('DistribuiÃ§Ã£o das AvaliaÃ§Ãµes das SÃ©ries')
    st.write('Este grÃ¡fico mostra como as avaliaÃ§Ãµes estÃ£o distribuÃ­das entre as sÃ©ries selecionadas.')
    # Cria um histograma das avaliaÃ§Ãµes usando Plotly
    fig = px.histogram(
        df_filtrado,
        x='avaliacao',
        nbins=20,
        labels={'avaliacao': 'AvaliaÃ§Ã£o'},
        title='DistribuiÃ§Ã£o das AvaliaÃ§Ãµes'
    )
    # Exibe o grÃ¡fico
    st.plotly_chart(fig, use_container_width=True)

with tab2:
    st.header('GÃªneros Mais Populares')
    st.write('Este grÃ¡fico apresenta os gÃªneros mais frequentes entre as sÃ©ries selecionadas.')
    # Lista todos os gÃªneros presentes nas sÃ©ries filtradas
    all_genres = [genre for sublist in df_filtrado['generos'] for genre in sublist]
    # Conta a frequÃªncia de cada gÃªnero
    genre_counts = Counter(all_genres)
    # Cria um DataFrame com os gÃªneros e suas contagens
    genre_df = pd.DataFrame(genre_counts.items(), columns=['GÃªnero', 'Contagem'])
    # Ordena os gÃªneros por contagem decrescente e seleciona os top 10
    genre_df = genre_df.sort_values('Contagem', ascending=False).head(10)
    # Cria um grÃ¡fico de barras horizontal usando Plotly
    fig = px.bar(
        genre_df,
        x='Contagem',
        y='GÃªnero',
        orientation='h',
        labels={'Contagem': 'NÃºmero de SÃ©ries', 'GÃªnero': 'GÃªnero'},
        title='Top 10 GÃªneros Mais Populares'
    )
    # Ajusta a ordem das categorias no eixo y
    fig.update_layout(yaxis={'categoryorder': 'total ascending'})
    # Exibe o grÃ¡fico
    st.plotly_chart(fig, use_container_width=True)

with tab3:
    st.header('RelaÃ§Ã£o entre NÃºmero de Temporadas e AvaliaÃ§Ã£o')
    st.write('Este grÃ¡fico explora a possÃ­vel correlaÃ§Ã£o entre o nÃºmero de temporadas de uma sÃ©rie e sua avaliaÃ§Ã£o mÃ©dia.')
    # Cria um grÃ¡fico de dispersÃ£o usando Plotly
    fig = px.scatter(
        df_filtrado,
        x='num_temporadas',
        y='avaliacao',
        hover_data=['titulo'],  # Mostra o tÃ­tulo da sÃ©rie ao passar o mouse
        labels={
            'num_temporadas': 'NÃºmero de Temporadas',
            'avaliacao': 'AvaliaÃ§Ã£o',
            'titulo': 'TÃ­tulo da SÃ©rie'
        },
        title='NÃºmero de Temporadas vs. AvaliaÃ§Ã£o'
    )
    # Exibe o grÃ¡fico
    st.plotly_chart(fig, use_container_width=True)

with tab4:
    st.header('AvaliaÃ§Ã£o MÃ©dia por Ano de LanÃ§amento')
    st.write('Este grÃ¡fico mostra como a avaliaÃ§Ã£o mÃ©dia das sÃ©ries evoluiu ao longo dos anos.')
    # Agrupa as sÃ©ries por ano de lanÃ§amento e calcula a mÃ©dia das avaliaÃ§Ãµes
    ano_avaliacao = df_filtrado.groupby('ano_lancamento')['avaliacao'].mean().reset_index()
    # Cria um grÃ¡fico de linha usando Plotly
    fig = px.line(
        ano_avaliacao,
        x='ano_lancamento',
        y='avaliacao',
        markers=True,
        labels={'ano_lancamento': 'Ano de LanÃ§amento', 'avaliacao': 'AvaliaÃ§Ã£o MÃ©dia'},
        title='AvaliaÃ§Ã£o MÃ©dia por Ano'
    )
    # Exibe o grÃ¡fico
    st.plotly_chart(fig, use_container_width=True)

with tab5:
    st.header('NÃºmero de SÃ©ries por PaÃ­s de Origem')
    st.write('Este grÃ¡fico destaca os paÃ­ses que mais produzem sÃ©ries entre as selecionadas.')
    # Lista todos os paÃ­ses de origem das sÃ©ries filtradas
    all_countries = [country for sublist in df_filtrado['pais_origem'] for country in sublist]
    # Conta a frequÃªncia de cada paÃ­s
    country_counts = Counter(all_countries)
    # Cria um DataFrame com os paÃ­ses e suas contagens
    country_df = pd.DataFrame(country_counts.items(), columns=['PaÃ­s', 'NÃºmero de SÃ©ries'])
    # Ordena os paÃ­ses por contagem decrescente e seleciona os top 10
    country_df = country_df.sort_values('NÃºmero de SÃ©ries', ascending=False).head(10)
    # Cria um grÃ¡fico de barras horizontal usando Plotly
    fig = px.bar(
        country_df,
        x='NÃºmero de SÃ©ries',
        y='PaÃ­s',
        orientation='h',
        labels={'NÃºmero de SÃ©ries': 'NÃºmero de SÃ©ries', 'PaÃ­s': 'PaÃ­s'},
        title='Top 10 PaÃ­ses com Mais SÃ©ries'
    )
    # Ajusta a ordem das categorias no eixo y
    fig.update_layout(yaxis={'categoryorder': 'total ascending'})
    # Exibe o grÃ¡fico
    st.plotly_chart(fig, use_container_width=True)

with tab6:
    st.header('Destaque: Breaking Bad')
    st.write('Analisando os dados, percebemos que o gÃªnero **Crime** nÃ£o estÃ¡ entre os mais frequentes nas sÃ©ries com altas avaliaÃ§Ãµes. No entanto, **Breaking Bad** Ã© a sÃ©rie com a maior avaliaÃ§Ã£o, mesmo sendo do gÃªnero Crime. Vamos explorar esta sÃ©rie em detalhes.')
    
    # Encontrar Breaking Bad no DataFrame usando o ID 
    breaking_bad = df[df['id'] == 1396]

    if not breaking_bad.empty:
        # ObtÃ©m a primeira linha 
        serie = breaking_bad.iloc[0]
        st.subheader(serie['titulo'])
        
        # Obter o poster da sÃ©rie usando a funÃ§Ã£o get_poster_url
        poster_url = get_poster_url(API_KEY, serie['id'])
        if poster_url:
            # Exibe a imagem do poster
            st.image(poster_url, width=300)
        
        # Mostrar detalhes da sÃ©rie
        st.write(f"**AvaliaÃ§Ã£o:** {serie['avaliacao']}")
        st.write(f"**GÃªneros:** {', '.join(serie['generos'])}")
        st.write(f"**NÃºmero de Temporadas:** {int(serie['num_temporadas'])}")
        st.write(f"**NÃºmero de EpisÃ³dios:** {int(serie['num_episodios'])}")
        st.write(f"**Data de LanÃ§amento:** {serie['data_lancamento'].strftime('%d/%m/%Y')}")
        st.write(f"**PaÃ­s(es) de Origem:** {', '.join(serie['pais_origem'])}")
        
        st.write('**Sinopse:**')
        # FunÃ§Ã£o para obter a sinopse da sÃ©rie usando a API do TMDB
        def get_overview(api_key, serie_id):
            base_url = 'https://api.themoviedb.org/3/tv/{}'
            url = base_url.format(serie_id)
            params = {
                'api_key': api_key,
                'language': 'pt-BR'
            }
            response = requests.get(url, params=params)
            data = response.json()
            overview = data.get('overview')
            return overview
        
        # ObtÃ©m a sinopse da sÃ©rie
        overview = get_overview(API_KEY, serie['id'])
        if overview:
            st.write(overview)
        
        st.write('**Por que Breaking Bad se destaca?**')
        st.write('Mesmo pertencendo ao gÃªnero Crime, que nÃ£o Ã© o mais frequente entre as sÃ©ries com altas avaliaÃ§Ãµes, Breaking Bad se destaca por sua narrativa envolvente, desenvolvimento profundo dos personagens e produÃ§Ã£o de alta qualidade. Isso mostra que, embora alguns gÃªneros possam ser menos representados, sÃ©ries excepcionais dentro desses gÃªneros podem alcanÃ§ar grande sucesso e reconhecimento.')
    else:
        # Mensagem caso Breaking Bad nÃ£o seja encontrada nos dados
        st.write('Breaking Bad nÃ£o foi encontrada nos dados.')

